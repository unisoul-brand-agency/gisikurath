/*
 * 一个钉子   v1.0
 *
 * @Desc      将页面元素钉住，以不跟随滚动条而滚动
 * @Cat 	  plugins/jQuery nail
 * @Date      2015/5
 * @Author    jiangminjing  
 * 
 * @Example
 	$('#nailObj').nail({
	    lOr: 'right',
	    topOffset: 10,
	    onlyTop: false,	
	    bottomOffset: 76,
	    defaultCall: function(nailObj){},
	    fixedCall: function(nailObj){},
	    floorCall: function(nailObj){}
	})
 * 
*/

(function ($) {
    $.fn.extend({
    	nail: function(options){	    

		    var nailObj = this;

    		var defaults = {
				nailBrother: nailObj.siblings(),	// 钉子的同辈元素   optional
				nailObj_wrap: nailObj.parent(),		// 钉子的父元素 	optional
				lOr: 'left',						// 你要钉在左边还是右边	'left' | 'right'
				topOffset: 0,						// 顶部偏移 (距离顶部还有多少像素时就开始钉？)    
				onlyTop: false,						// 简单模式 (只判断顶部底部距离钉，不钉在页面底部) false | true
				bottomOffset: 0,					// 底部统称 (距离底部还有多少像素时又开始钉？) 
    			defaultCall: null,					// 滚动到默认位置回调
    			fixedCall: null,					// 滚动到固定位置回调
    			floorCall: null						// 滚动到底部位置回调
    		}
    	

		    var options = $.extend(defaults, options || {});	
		    	
		    var nailObj_toTop = nailObj.offset().top; 
		    var oWindow = $(window); 

		    // 如果旁边的内容高大于钉子高度，才执行
		    if(options.nailBrother.height() > nailObj.outerHeight()){

		        //当窗口被拉伸时        
		        oWindow.resize(function(){
		            if(nailObj.attr('style')){
		                if(nailObj.attr('style').indexOf('fixed') >= 0){
		                    nailObj.css(options.lOr, $(window).width()-options.nailObj_wrap.width()-options.nailObj_wrap.offset().left );
		                }else{
		                    nailObj.css(options.lOr, 0);
		                }
		            } 
		        }); 
		        
	            // 当窗口被滚动时
	            oWindow.scroll(function(){            
	                var win_rollUp = oWindow.scrollTop();    	                
	                
	                if(win_rollUp >= nailObj_toTop-options.topOffset){                  
	                    
	                    var offsetFloor =options.nailBrother.outerHeight() +options.nailBrother.offset().top - (nailObj.outerHeight()+options.topOffset) - options.bottomOffset;
	                    if(win_rollUp < offsetFloor || options.onlyTop){
	                    	// fixed
	                        // var fixedNum = oWindow.width()-options.nailObj_wrap.width()-options.nailObj_wrap.offset().left;
	                        var fixedNum = (oWindow.width()-options.nailObj_wrap.width()) / 2;
	                        var fixedStyle = 'position:fixed; bottom:auto;top: '+options.topOffset+'px; '+options.lOr+':'+fixedNum+'px';    
	                        nailObj.attr('style', fixedStyle);
	                        if(options.fixedCall && typeof options.fixedCall === 'function'){
		                    	options.fixedCall(nailObj);
		                    }

	                    }else{
	                        //floor
	                        var absoluteStyle = 'position:absolute;'+options.lOr+':0;top:auto; bottom:'+options.bottomOffset+'px';              
	                        nailObj.attr('style', absoluteStyle);
	                        if(options.floorCall && typeof options.floorCall === 'function'){
		                    	options.floorCall(nailObj);
		                    }
	                    }

	                }else{
	                	// default
	                    var defaultStyle = 'position:absolute;'+options.lOr+':0;';
	                    nailObj.attr('style', defaultStyle);

	                    if(options.defaultCall && typeof options.defaultCall === 'function'){
	                    	options.defaultCall(nailObj);
	                    }
	                }
	            });

		    } 
		    // Returns the element. Chainable.
		    return nailObj;
		}	

    });

})(jQuery);